from datetime import timedelta
from typing import Mapping, Sequence
from typing_extensions import Self

from multidict import CIMultiDict

from pyreqwest.http import Url, UrlType
from pyreqwest.multipart import Form
from pyreqwest.response import Response


class RequestBody:
    @staticmethod
    def from_str(body: str) -> "RequestBody": ...
    @staticmethod
    def from_bytes(body: bytes) -> "RequestBody": ...
    @staticmethod
    def from_stream(async_gen: object) -> "RequestBody": ...
    def get_bytes(self) -> bytes | None: ...
    def get_stream(self) -> object | None: ...


class Request:
    async def send(self) -> Response: ...

    @property
    def method(self) -> str: ...
    @method.setter
    def method(self, value: str) -> None: ...
    @property
    def url(self) -> Url: ...
    @url.setter
    def url(self, value: UrlType) -> None: ...

    def copy_headers(self) -> CIMultiDict[str]: ...
    def set_headers(self, value: CIMultiDict[str]) -> None: ...
    def get_header(self, key: str) -> str | None: ...
    def set_header(self, key: str, value: str) -> str | None: ...
    def copy_body(self) -> RequestBody | None: ...
    def set_body(self, value: RequestBody) -> None: ...
    def copy_extensions(self) -> dict[str, str] | None: ...
    def set_extensions(self, value: Mapping[str, str] | None) -> None: ...

    def copy(self) -> Self: ...
    def __copy__(self) -> Self: ...


class RequestBuilder:
    def build(self) -> Request: ...
    def header(self, key: str, value: str) -> Self: ...
    def headers(self, headers: Mapping[str, str]) -> Self: ...
    def basic_auth(self, username: str, password: str | None) -> Self: ...
    def bearer_auth(self, token: str) -> Self: ...
    def body_bytes(self, body: bytes) -> Self: ...
    def body_str(self, body: str) -> Self: ...
    def body_stream(self, async_gen: object) -> Self: ...
    def timeout(self, timeout: timedelta) -> Self: ...
    def multipart(self, multipart: Form) -> Self: ...
    def query(self, query: Sequence[tuple[str, str]]) -> Self: ...
    def version(self, version: str) -> Self: ...
    def form(self, form: Sequence[tuple[str, str]]) -> Self: ...
    def extensions(self, extensions: Mapping[str, str]) -> Self: ...
