from datetime import timedelta
from typing import Any, Self

from pyreqwest.http import Body, HeaderMap, Url
from pyreqwest.multipart import Form
from pyreqwest.response import Response
from pyreqwest.types import ExtensionsType, FormParams, HeadersType, Middleware, QueryParams, Stream, UrlType

class Request:
    @property
    def method(self) -> str: ...
    @method.setter
    def method(self, value: str) -> None: ...
    @property
    def url(self) -> Url: ...
    @url.setter
    def url(self, value: UrlType) -> None: ...
    @property
    def headers(self) -> HeaderMap: ...
    @headers.setter
    def headers(self, headers: HeadersType) -> None: ...
    @property
    def body(self) -> Body | None: ...
    @body.setter
    def body(self, value: Body | None) -> None: ...
    @property
    def extensions(self) -> dict[str, Any]: ...
    @extensions.setter
    def extensions(self, value: ExtensionsType) -> None: ...
    def copy(self) -> Self: ...
    def __copy__(self) -> Self: ...
    def repr_full(self) -> str: ...
    @classmethod
    def from_request_and_body(cls, request: Request, body: Body | None) -> Self: ...

class ConsumedRequest(Request):
    async def send(self) -> Response: ...

class StreamRequest(Request):
    async def __aenter__(self) -> Response: ...
    async def __aexit__(self, *args: object, **kwargs: Any) -> None: ...
    @property
    def initial_read_size(self) -> int: ...
    @initial_read_size.setter
    def initial_read_size(self, value: int) -> None: ...
    @staticmethod
    def default_initial_read_size() -> int: ...

class RequestBuilder:
    def build_consumed(self) -> ConsumedRequest: ...
    def build_streamed(self) -> StreamRequest: ...
    def error_for_status(self, enable: bool) -> Self: ...
    def with_middleware(self, middleware: Middleware) -> Self: ...
    def header(self, name: str, value: str) -> Self: ...
    def headers(self, headers: HeadersType) -> Self: ...
    def basic_auth(self, username: str, password: str | None) -> Self: ...
    def bearer_auth(self, token: str) -> Self: ...
    def body(self, body: Body | None) -> Self: ...
    def body_bytes(self, body: bytes | bytearray | memoryview) -> Self: ...
    def body_text(self, body: str) -> Self: ...
    def body_json(self, body: Any) -> Self: ...
    def body_stream(self, async_gen: Stream) -> Self: ...
    def timeout(self, timeout: timedelta) -> Self: ...
    def multipart(self, multipart: Form) -> Self: ...
    def query(self, query: QueryParams) -> Self: ...
    def form(self, form: FormParams) -> Self: ...
    def extensions(self, extensions: ExtensionsType) -> Self: ...
