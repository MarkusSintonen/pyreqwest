from datetime import timedelta
from typing import Any, Self

from pyreqwest.http import HeaderMap, RequestBody, Url
from pyreqwest.multipart import FormBuilder
from pyreqwest.response import BlockingResponse, Response
from pyreqwest.types import BlockingStream, ExtensionsType, FormParams, HeadersType, QueryParams, Stream

class Request:
    @property
    def method(self) -> str: ...
    @method.setter
    def method(self, value: str) -> None: ...
    @property
    def url(self) -> Url: ...
    @url.setter
    def url(self, value: Url | str) -> None: ...
    @property
    def headers(self) -> HeaderMap: ...
    @headers.setter
    def headers(self, headers: HeadersType) -> None: ...
    @property
    def body(self) -> RequestBody | None: ...
    @body.setter
    def body(self, value: RequestBody | None) -> None: ...
    @property
    def extensions(self) -> dict[str, Any]: ...
    @extensions.setter
    def extensions(self, value: ExtensionsType) -> None: ...
    def copy(self) -> Self: ...
    def __copy__(self) -> Self: ...
    def repr_full(self) -> str: ...
    @classmethod
    def from_request_and_body(cls, request: Request, body: RequestBody | None) -> Self: ...

class ConsumedRequest(Request):
    async def send(self) -> Response: ...

class StreamRequest(Request):
    async def __aenter__(self) -> Response: ...
    async def __aexit__(self, *args: object, **kwargs: Any) -> None: ...
    @property
    def read_buffer_limit(self) -> int: ...

class BlockingConsumedRequest(Request):
    def send(self) -> BlockingResponse: ...

class BlockingStreamRequest(Request):
    def __enter__(self) -> BlockingResponse: ...
    def __exit__(self, *args: object, **kwargs: Any) -> None: ...
    @property
    def read_buffer_limit(self) -> int: ...

class BaseRequestBuilder:
    def error_for_status(self, enable: bool) -> Self: ...
    def header(self, name: str, value: str) -> Self: ...
    def headers(self, headers: HeadersType) -> Self: ...
    def basic_auth(self, username: str, password: str | None) -> Self: ...
    def bearer_auth(self, token: str) -> Self: ...
    def body_bytes(self, body: bytes | bytearray | memoryview) -> Self: ...
    def body_text(self, body: str) -> Self: ...
    def body_json(self, body: Any) -> Self: ...
    def timeout(self, timeout: timedelta) -> Self: ...
    def multipart(self, multipart: FormBuilder) -> Self: ...
    def query(self, query: QueryParams) -> Self: ...
    def form(self, form: FormParams) -> Self: ...
    def extensions(self, extensions: ExtensionsType) -> Self: ...
    def streamed_read_buffer_limit(self, value: int) -> Self: ...
    @staticmethod
    def default_streamed_read_buffer_limit() -> int: ...

class RequestBuilder(BaseRequestBuilder):
    def build(self) -> ConsumedRequest: ...
    def build_streamed(self) -> StreamRequest: ...
    def body_stream(self, stream: Stream) -> Self: ...

class BlockingRequestBuilder(BaseRequestBuilder):
    def build(self) -> BlockingConsumedRequest: ...
    def build_streamed(self) -> BlockingStreamRequest: ...
    def body_stream(self, stream: BlockingStream) -> Self: ...
