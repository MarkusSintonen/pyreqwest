from datetime import timedelta
from typing import Mapping, Sequence, Any
from typing_extensions import Self

from multidict import CIMultiDict

from pyreqwest.http import Url, Body
from pyreqwest.http.types import Stream, UrlType
from pyreqwest.multipart import Form
from pyreqwest.response import Response


class Request:
    @property
    def method(self) -> str: ...
    @method.setter
    def method(self, value: str) -> None: ...
    @property
    def url(self) -> Url: ...
    @url.setter
    def url(self, value: UrlType) -> None: ...
    @property
    def extensions(self) -> dict[str, Any]: ...
    @extensions.setter
    def extensions(self, value: dict[str, Any]) -> None: ...

    def copy_headers(self) -> CIMultiDict[str]: ...
    def set_headers(self, value: CIMultiDict[str]) -> None: ...
    def get_header(self, key: str) -> str | None: ...
    def set_header(self, key: str, value: str) -> str | None: ...
    def copy_body(self) -> Body | None: ...
    def set_body(self, value: Body | None) -> None: ...

    def copy(self) -> Self: ...
    def __copy__(self) -> Self: ...


class ConsumedRequest(Request):
    async def send(self) -> Response: ...


class StreamRequest(Request):
    async def __aenter__(self) -> Response: ...
    async def __aexit__(self, *args: Any, **kwargs: Any) -> None: ...

    @property
    def initial_read_size(self) -> int: ...
    @initial_read_size.setter
    def initial_read_size(self, value: int) -> None: ...
    @staticmethod
    def default_initial_read_size() -> int: ...


class RequestBuilder:
    def build_consumed(self) -> ConsumedRequest: ...
    def build_streamed(self) -> StreamRequest: ...
    def error_for_status(self, enable: bool) -> Self: ...
    def header(self, key: str, value: str) -> Self: ...
    def headers(self, headers: Mapping[str, str]) -> Self: ...
    def basic_auth(self, username: str, password: str | None) -> Self: ...
    def bearer_auth(self, token: str) -> Self: ...
    def body_bytes(self, body: bytes) -> Self: ...
    def body_text(self, body: str) -> Self: ...
    def body_stream(self, async_gen: Stream) -> Self: ...
    def timeout(self, timeout: timedelta) -> Self: ...
    def multipart(self, multipart: Form) -> Self: ...
    def query(self, query: Sequence[tuple[str, str]]) -> Self: ...
    def version(self, version: str) -> Self: ...
    def form(self, form: Sequence[tuple[str, str]]) -> Self: ...
    def extensions(self, extensions: Mapping[str, str]) -> Self: ...
