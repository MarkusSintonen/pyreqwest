from json import JSONDecodeError as JSONDecodeError_
from typing import TypedDict, Generic, TypeVar


CauseErrorDetails = TypedDict("CauseErrorDetails", {"causes": list[str] | None})
StatusErrorDetails = TypedDict("StatusErrorDetails", {"status": int})
T = TypeVar("T", bound=CauseErrorDetails | StatusErrorDetails)


class HTTPError(Exception, Generic[T]):
    def __init__(self, message: str, details: T | None = None) -> None:
        assert isinstance(message, str) and isinstance(details, dict | None)
        super().__init__(message, details)
        self.message = message
        self.details = details

class RequestError(HTTPError[T], Generic[T]): ...
class TransportError(RequestError[CauseErrorDetails]): ...
class DecodeError(RequestError[CauseErrorDetails]): ...
class RedirectError(RequestError[CauseErrorDetails]): ...
class StatusError(RequestError[StatusErrorDetails]): ...

class RequestTimeoutError(TransportError, TimeoutError): ...
class NetworkError(TransportError): ...

class ConnectTimeoutError(RequestTimeoutError): ...
class ReadTimeoutError(RequestTimeoutError): ...
class WriteTimeoutError(RequestTimeoutError): ...
class PoolTimeoutError(RequestTimeoutError): ...

class ConnectError(NetworkError): ...
class ReadError(NetworkError): ...
class WriteError(NetworkError): ...
class CloseError(NetworkError): ...

class BuilderError(HTTPError[CauseErrorDetails], ValueError): ...
class JSONDecodeError(HTTPError[CauseErrorDetails], JSONDecodeError_): ...
