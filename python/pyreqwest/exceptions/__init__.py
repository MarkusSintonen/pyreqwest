from json import JSONDecodeError as JSONDecodeError_
from typing import TypedDict, Generic, TypeVar, Any

Cause = TypedDict("Cause", {"message": str})
CauseErrorDetails = TypedDict("CauseErrorDetails", {"causes": list[Cause] | None})
StatusErrorDetails = TypedDict("StatusErrorDetails", {"status": int})
T = TypeVar("T", bound=CauseErrorDetails | StatusErrorDetails)


class HTTPError(Exception):
    def __init__(self, message: str, *args: Any) -> None:
        assert isinstance(message, str)
        super().__init__(message, *args)
        self.message = message

class DetailedHTTPError(HTTPError, Generic[T]):
    def __init__(self, message: str, details: T | None = None) -> None:
        assert isinstance(details, dict | None)
        super().__init__(message, details)
        self.details = details

class RequestError(DetailedHTTPError[T], Generic[T]): ...

class StatusError(RequestError[StatusErrorDetails]): ...
class RedirectError(RequestError[CauseErrorDetails]): ...
class RequestPanicError(RequestError[CauseErrorDetails]): ...
class BodyError(RequestError[CauseErrorDetails]): ...
class TransportError(RequestError[CauseErrorDetails]): ...

class DecodeError(BodyError): ...

class RequestTimeoutError(TransportError, TimeoutError): ...
class NetworkError(TransportError): ...

class ConnectTimeoutError(RequestTimeoutError): ...
class ReadTimeoutError(RequestTimeoutError): ...
class WriteTimeoutError(RequestTimeoutError): ...
class PoolTimeoutError(RequestTimeoutError): ...

class ConnectError(NetworkError): ...
class ReadError(NetworkError): ...
class WriteError(NetworkError): ...
class CloseError(NetworkError): ...

class BuilderError(DetailedHTTPError[CauseErrorDetails], ValueError): ...

class JSONDecodeError(HTTPError, JSONDecodeError_):
    def __init__(self, message: str, details: dict[str, Any]) -> None:
        assert isinstance(details, dict)
        assert isinstance(details["doc"], str) and isinstance(details["pos"], int)
        super().__init__(message, details["doc"], details["pos"])
