from collections.abc import Sequence
from datetime import datetime, timedelta
from typing import Literal, Self, TypeAlias

from pyreqwest.http import Url

SameSite: TypeAlias = Literal["Strict", "Lax", "None"]

class Cookie(Sequence[str]):
    def __init__(self, name: str, value: str) -> None: ...
    @staticmethod
    def parse(cookie: str) -> Cookie: ...
    @staticmethod
    def parse_encoded(cookie: str) -> Cookie: ...
    @staticmethod
    def split_parse(cookie: str) -> list[Cookie]: ...
    @staticmethod
    def split_parse_encoded(cookie: str) -> list[Cookie]: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> str: ...
    @property
    def value_trimmed(self) -> str: ...
    @property
    def http_only(self) -> bool | None: ...
    @property
    def secure(self) -> bool | None: ...
    @property
    def same_site(self) -> SameSite | None: ...
    @property
    def partitioned(self) -> bool | None: ...
    @property
    def max_age(self) -> timedelta | None: ...
    @property
    def path(self) -> str | None: ...
    @property
    def domain(self) -> str | None: ...
    @property
    def expires_datetime(self) -> datetime | None: ...
    def name_value(self) -> tuple[str, str]: ...
    def name_value_trimmed(self) -> tuple[str, str]: ...
    def encode(self) -> str: ...
    def stripped(self) -> str: ...
    def __copy__(self) -> Cookie: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> str: ...

class CookieBuilder:
    def __init__(self, name: str, value: str) -> None: ...
    @staticmethod
    def from_cookie(cookie: Cookie) -> CookieBuilder: ...
    def build(self) -> Cookie: ...
    def expires(self, expires: datetime | None) -> Self: ...
    def max_age(self, max_age: timedelta) -> Self: ...
    def domain(self, domain: str) -> Self: ...
    def path(self, path: str) -> Self: ...
    def secure(self, secure: bool) -> Self: ...
    def http_only(self, http_only: bool) -> Self: ...
    def same_site(self, same_site: SameSite) -> Self: ...
    def partitioned(self, partitioned: bool) -> Self: ...
    def permanent(self) -> Self: ...
    def removal(self) -> Self: ...

class CookieStore:
    def __init__(self) -> None: ...
    def get_request_values(self, url: Url | str) -> list[tuple[str, str]]: ...
    def store_response_cookies(self, cookies: list[Cookie | str], url: Url | str) -> None: ...
    def contains(self, domain: str, path: str, name: str) -> bool: ...
    def contains_any(self, domain: str, path: str, name: str) -> bool: ...
    def get(self, domain: str, path: str, name: str) -> Cookie | None: ...
    def get_any(self, domain: str, path: str, name: str) -> Cookie | None: ...
    def remove(self, domain: str, path: str, name: str) -> Cookie | None: ...
    def matches(self, url: Url | str) -> list[Cookie]: ...
    def insert(self, cookie: Cookie | str, request_url: Url | str) -> None: ...
    def clear(self) -> None: ...
    def get_all_unexpired(self) -> list[Cookie]: ...
    def get_all_any(self) -> list[Cookie]: ...
