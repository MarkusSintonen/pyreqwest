from typing import Any
from typing_extensions import Self

from multidict import MultiDictProxy

from .types import Stream, Params


class Body:
    @staticmethod
    def from_str(body: str) -> "Body": ...
    @staticmethod
    def from_bytes(body: bytes) -> "Body": ...
    @staticmethod
    def from_stream(async_gen: Stream) -> "Body": ...
    def get_bytes(self) -> bytes | None: ...
    def get_stream(self) -> object | None: ...


class Url:
    def __init__(self, url: str | Url) -> None: ...
    @staticmethod
    def parse(url: str) -> "Url": ...
    @staticmethod
    def parse_with_params(url: str, params: Params) -> "Url": ...
    def join(self, join_input: str) -> Self: ...
    def make_relative(self, base: Self) -> str | None: ...
    @property
    def origin_ascii(self) -> str: ...
    @property
    def origin_unicode(self) -> str: ...
    @property
    def scheme(self) -> str: ...
    @property
    def is_special(self) -> bool: ...
    @property
    def has_authority(self) -> bool: ...
    @property
    def authority(self) -> str: ...
    @property
    def cannot_be_a_base(self) -> bool: ...
    @property
    def username(self) -> str: ...
    @property
    def password(self) -> str | None: ...
    @property
    def has_host(self) -> bool: ...
    @property
    def host_str(self) -> str | None: ...
    @property
    def domain(self) -> str | None: ...
    @property
    def port(self) -> int | None: ...
    @property
    def port_or_known_default(self) -> int | None: ...
    @property
    def path(self) -> str: ...
    @property
    def path_segments(self) -> tuple[str, ...] | None: ...
    @property
    def query_string(self) -> str | None: ...
    @property
    def query(self) -> MultiDictProxy: ...
    @property
    def fragment(self) -> str | None: ...
    def with_fragment(self, fragment: str | None) -> Self: ...
    def with_query(self, query: Params) -> Self: ...
    def extend_query(self, query: Params) -> Self: ...
    def with_query_string(self, query: str | None) -> Self: ...
    def with_path(self, path: str) -> Self: ...
    def with_path_segments(self, segments: list[str]) -> Self: ...
    def with_port(self, port: int | None) -> Self: ...
    def with_host(self, host: str | None) -> Self: ...
    def with_ip_host(self, addr: str) -> Self: ...
    def with_username(self, username: str) -> Self: ...
    def with_password(self, password: str | None) -> Self: ...
    def with_scheme(self, scheme: str) -> Self: ...
    def copy(self) -> Self: ...
    def __copy__(self) -> Self: ...
    def __truediv__(self, join_input: str) -> Self: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __hash__(self) -> int: ...
    def __richcmp__(self, other: Self, op: int) -> bool: ...
