"""Types for pyreqwest.http module."""

from collections.abc import ItemsView, Iterator, KeysView, MutableMapping, Sequence, ValuesView
from typing import Any, Self, TypeVar, overload

from pyreqwest.types import HeadersType, QueryParams

_T = TypeVar("_T")

class Url(Sequence[str]):
    def __init__(self, url: str | Url) -> None: ...
    @staticmethod
    def parse(url: str) -> Url: ...
    @staticmethod
    def parse_with_params(url: str, params: QueryParams) -> Url: ...
    def join(self, join_input: str) -> Self: ...
    def make_relative(self, base: Self) -> str | None: ...
    @property
    def origin_ascii(self) -> str: ...
    @property
    def origin_unicode(self) -> str: ...
    @property
    def scheme(self) -> str: ...
    @property
    def is_special(self) -> bool: ...
    @property
    def has_authority(self) -> bool: ...
    @property
    def authority(self) -> str: ...
    @property
    def cannot_be_a_base(self) -> bool: ...
    @property
    def username(self) -> str: ...
    @property
    def password(self) -> str | None: ...
    @property
    def has_host(self) -> bool: ...
    @property
    def host_str(self) -> str | None: ...
    @property
    def domain(self) -> str | None: ...
    @property
    def port(self) -> int | None: ...
    @property
    def port_or_known_default(self) -> int | None: ...
    @property
    def path(self) -> str: ...
    @property
    def path_segments(self) -> list[str] | None: ...
    @property
    def query_string(self) -> str | None: ...
    @property
    def query_pairs(self) -> list[tuple[str, str]]: ...
    @property
    def query_dict_multi_value(self) -> dict[str, str | list[str]]: ...
    @property
    def fragment(self) -> str | None: ...
    def with_fragment(self, fragment: str | None) -> Self: ...
    def with_query(self, query: QueryParams | None) -> Self: ...
    def extend_query(self, query: QueryParams) -> Self: ...
    def with_query_string(self, query: str | None) -> Self: ...
    def with_path(self, path: str) -> Self: ...
    def with_path_segments(self, segments: list[str]) -> Self: ...
    def with_port(self, port: int | None) -> Self: ...
    def with_host(self, host: str | None) -> Self: ...
    def with_ip_host(self, addr: str) -> Self: ...
    def with_username(self, username: str) -> Self: ...
    def with_password(self, password: str | None) -> Self: ...
    def with_scheme(self, scheme: str) -> Self: ...
    def __copy__(self) -> Self: ...
    def __truediv__(self, join_input: str) -> Self: ...
    def __hash__(self) -> int: ...
    def __richcmp__(self, other: Any, op: int) -> bool: ...
    @overload
    def __getitem__(self, index: int) -> str: ...
    @overload
    def __getitem__(self, index: slice) -> Sequence[str]: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...

class Mime(Sequence[str]):
    @staticmethod
    def parse(mime: str) -> Mime: ...
    @property
    def type_(self) -> str: ...
    @property
    def subtype(self) -> str: ...
    @property
    def suffix(self) -> str | None: ...
    @property
    def parameters(self) -> list[tuple[str, str]]: ...
    @property
    def essence_str(self) -> str: ...
    def get_param(self, name: str) -> str | None: ...
    def copy(self) -> Self: ...
    def __copy__(self) -> Self: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, index: int) -> str: ...
    @overload
    def __getitem__(self, index: slice) -> Sequence[str]: ...
    def __len__(self) -> int: ...

class HeaderMapItemsView(ItemsView[str, str]):
    def __eq__(self, other: object) -> bool: ...

class HeaderMapKeysView(KeysView[str]):
    def __eq__(self, other: object) -> bool: ...

class HeaderMapValuesView(ValuesView[str]):
    def __eq__(self, other: object) -> bool: ...

class HeaderMap(MutableMapping[str, str]):
    def __init__(self, other: HeadersType | None = None) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __getitem__(self, key: str, /) -> str: ...
    def __setitem__(self, key: str, value: str, /) -> None: ...
    def __delitem__(self, key: str, /) -> None: ...
    def items(self) -> HeaderMapItemsView: ...
    def keys(self) -> HeaderMapKeysView: ...
    def values(self) -> HeaderMapValuesView: ...
    def len(self) -> int: ...
    def keys_len(self) -> int: ...
    def getall(self, key: str) -> list[str]: ...
    def insert(self, key: str, value: str, *, is_sensitive: bool = False) -> list[str]: ...
    def append(self, key: str, value: str, *, is_sensitive: bool = False) -> bool: ...
    def extend(self, other: HeadersType) -> None: ...
    @overload
    def popall(self, key: str) -> list[str]: ...
    @overload
    def popall(self, key: str, /, default: _T) -> list[str] | _T: ...
    def dict_multi_value(self) -> dict[str, str | list[str]]: ...
    def copy(self) -> Self: ...
    def __copy__(self) -> Self: ...
    def __eq__(self, other: object) -> bool: ...
