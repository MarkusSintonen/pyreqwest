from typing import Any
from typing_extensions import Self


class Body:
    @staticmethod
    def from_str(body: str) -> "Body": ...
    @staticmethod
    def from_bytes(body: bytes) -> "Body": ...
    @staticmethod
    def from_stream(async_gen: object) -> "Body": ...
    def get_bytes(self) -> bytes | None: ...
    def get_stream(self) -> object | None: ...


class Url:
    def __init__(self, url: str) -> None: ...
    @staticmethod
    def parse(url: str) -> 'Url': ...
    @staticmethod
    def parse_with_params(url: str, params: list[tuple[str, str]]) -> 'Url': ...

    def join(self, input: str) -> Self: ...
    def make_relative(self, base: Self) -> str | None: ...
    def as_str(self) -> str: ...
    def origin_ascii(self) -> str: ...
    def origin_unicode(self) -> str: ...
    def scheme(self) -> str: ...
    def is_special(self) -> bool: ...
    def has_authority(self) -> bool: ...
    def authority(self) -> str: ...
    def cannot_be_a_base(self) -> bool: ...
    def username(self) -> str: ...
    def password(self) -> str | None: ...
    def has_host(self) -> bool: ...
    def host_str(self) -> str | None: ...
    def domain(self) -> str | None: ...
    def port(self) -> int | None: ...
    def port_or_known_default(self) -> int | None: ...
    def path(self) -> str: ...
    def path_segments(self) -> list[str] | None: ...
    def query(self) -> str | None: ...
    def query_pairs(self) -> list[tuple[str, str]]: ...
    def query_dict(self) -> dict[str, str]: ...
    def fragment(self) -> str | None: ...
    def set_fragment(self, fragment: str | None) -> None: ...
    def set_query(self, query: str | None) -> None: ...
    def set_query_pairs(self, query: list[tuple[str, str]]) -> None: ...
    def set_query_dict(self, query: dict[str, str]) -> None: ...
    def set_path(self, path: str) -> None: ...
    def set_path_segments(self, segments: list[str]) -> None: ...
    def set_port(self, port: int | None) -> None: ...
    def set_host(self, host: str | None) -> None: ...
    def set_ip_host(self, addr: str) -> None: ...
    def set_password(self, password: str | None) -> None: ...
    def set_username(self, username: str) -> None: ...
    def set_scheme(self, scheme: str) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __hash__(self) -> int: ...
    def __richcmp__(self, other: Any, op: Any) -> bool: ...
