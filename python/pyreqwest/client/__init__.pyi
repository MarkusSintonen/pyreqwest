# ruff: noqa: E501, F401
from datetime import timedelta
from typing import Any, Self

from pyreqwest.proxy import Proxy
from pyreqwest.request import RequestBuilder
from pyreqwest.types import UrlType, Middleware, HeadersType


class Client:
    def request(self, method: str, url: UrlType) -> RequestBuilder: ...
    def get(self, url: UrlType) -> RequestBuilder: ...
    def post(self, url: UrlType) -> RequestBuilder: ...
    def put(self, url: UrlType) -> RequestBuilder: ...
    def patch(self, url: UrlType) -> RequestBuilder: ...
    def delete(self, url: UrlType) -> RequestBuilder: ...
    def head(self, url: UrlType) -> RequestBuilder: ...
    async def __aenter__(self) -> Self: ...
    async def __aexit__(self, *args: Any, **kwargs: Any) -> None: ...
    async def close(self) -> None: ...


class ClientBuilder:
    def __init__(self) -> None: ...
    def build(self) -> Client: ...
    def base_url(self, url: UrlType) -> Self: ...
    def runtime(self, runtime: Runtime) -> Self: ...
    def with_middleware(self, middleware: Middleware) -> Self: ...
    def max_connections(self, max: int | None) -> Self: ...
    def error_for_status(self, enable: bool) -> Self: ...
    def user_agent(self, value: str) -> Self: ...
    def default_headers(self, headers: HeadersType) -> Self: ...
    def cookie_store(self, enable: bool) -> Self: ...
    def gzip(self, enable: bool) -> Self: ...
    def brotli(self, enable: bool) -> Self: ...
    def zstd(self, enable: bool) -> Self: ...
    def deflate(self, enable: bool) -> Self: ...
    def max_redirects(self, max: int) -> Self: ...
    def referer(self, enable: bool) -> Self: ...
    def proxy(self, proxy: Proxy) -> Self: ...
    def no_proxy(self) -> Self: ...
    def timeout(self, timeout: timedelta) -> Self: ...
    def read_timeout(self, timeout: timedelta) -> Self: ...
    def connect_timeout(self, timeout: timedelta) -> Self: ...
    def pool_timeout(self, timeout: timedelta) -> Self: ...
    def pool_idle_timeout(self, timeout: timedelta) -> Self: ...
    def pool_max_idle_per_host(self, max: int) -> Self: ...
    def http1_title_case_headers(self) -> Self: ...
    def http1_allow_obsolete_multiline_headers_in_responses(self, value: bool) -> Self: ...
    def http1_ignore_invalid_headers_in_responses(self, value: bool) -> Self: ...
    def http1_allow_spaces_after_header_name_in_responses(self, value: bool) -> Self: ...
    def http1_only(self) -> Self: ...
    def http09_responses(self) -> Self: ...
    def http2_prior_knowledge(self) -> Self: ...
    def http2_initial_stream_window_size(self, value: int | None) -> Self: ...
    def http2_initial_connection_window_size(self, value: int | None) -> Self: ...
    def http2_adaptive_window(self, enabled: bool) -> Self: ...
    def http2_max_frame_size(self, value: int | None) -> Self: ...
    def http2_max_header_list_size(self, value: int) -> Self: ...
    def http2_keep_alive_interval(self, value: timedelta | None) -> Self: ...
    def http2_keep_alive_timeout(self, timeout: timedelta) -> Self: ...
    def http2_keep_alive_while_idle(self, enabled: bool) -> Self: ...
    def tcp_nodelay(self, enabled: bool) -> Self: ...
    def local_address(self, addr: str | None) -> Self: ...
    def interface(self, value: str) -> Self: ...
    def tcp_keepalive(self, value: timedelta | None) -> Self: ...
    def tcp_keepalive_interval(self, value: timedelta | None) -> Self: ...
    def tcp_keepalive_retries(self, value: int | None) -> Self: ...
    def tcp_user_timeout(self, timeout: timedelta | None) -> Self: ...
    def add_root_certificate_der(self, cert: bytes) -> Self: ...
    def add_root_certificate_pem(self, cert: bytes) -> Self: ...
    def add_crl_pem(self, cert: bytes) -> Self: ...
    def tls_built_in_root_certs(self, enable: bool) -> Self: ...
    def tls_built_in_webpki_certs(self, enable: bool) -> Self: ...
    def identity_pem(self, buf: bytes) -> Self: ...
    def danger_accept_invalid_hostnames(self, enable: bool) -> Self: ...
    def danger_accept_invalid_certs(self, enable: bool) -> Self: ...
    def tls_sni(self, enable: bool) -> Self: ...
    def min_tls_version(self, value: str) -> Self: ...
    def max_tls_version(self, value: str) -> Self: ...
    def https_only(self, enable: bool) -> Self: ...
    def resolve(self, domain: str, ip: str, port: int) -> Self: ...


class Runtime:
    def __init__(self, *, thread_name: str | None = None) -> None: ...
    async def close(self) -> None: ...
