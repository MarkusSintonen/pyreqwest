from typing import Any, Self

from pyreqwest.bytes import Bytes
from pyreqwest.http import Body, HeaderMap, Mime
from pyreqwest.types import ExtensionsType, HeadersType

class Response:
    @property
    def status(self) -> int: ...
    @status.setter
    def status(self, value: int) -> None: ...
    @property
    def headers(self) -> HeaderMap: ...
    @headers.setter
    def headers(self, headers: HeadersType) -> None: ...
    @property
    def extensions(self) -> dict[str, Any]: ...
    @extensions.setter
    def extensions(self, value: ExtensionsType) -> None: ...
    @property
    def version(self) -> str: ...
    @version.setter
    def version(self, value: str) -> None: ...
    def error_for_status(self) -> None: ...
    def get_header(self, key: str) -> str | None: ...
    def get_header_all(self, key: str) -> list[str]: ...
    def content_type_mime(self) -> Mime | None: ...
    async def bytes(self) -> Bytes: ...
    async def json(self) -> Any: ...
    async def text(self) -> str: ...
    async def read(self, n: int = ...) -> Bytes: ...
    async def next_chunk(self) -> Bytes | None: ...

class ResponseBuilder:
    def __init__(self) -> None: ...
    async def build(self) -> Response: ...
    def status(self, value: int) -> Self: ...
    def version(self, value: str) -> Self: ...
    def header(self, name: str, value: str) -> Self: ...
    def headers(self, headers: HeadersType) -> Self: ...
    def body(self, body: Body | None) -> Self: ...
    def body_bytes(self, body: bytes | bytearray | memoryview) -> Self: ...
    def body_text(self, body: str) -> Self: ...
    def body_json(self, body: Any) -> Self: ...
    def extensions(self, value: ExtensionsType) -> Self: ...
