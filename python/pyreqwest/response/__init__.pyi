from types import TracebackType
from typing import Any, Self, Mapping

from multidict import CIMultiDict

from pyreqwest.bytes import Bytes
from pyreqwest.http import Body, Url


class Response:
    async def __aenter__(self) -> Self: ...
    async def __aexit__(
        self,
        exc_type: type[BaseException] | None,
        exc_val: BaseException | None,
        exc_tb: TracebackType | None,
    ) -> None: ...
    async def close(self) -> None: ...

    @property
    def status(self) -> int: ...
    @status.setter
    def status(self, value: int) -> None: ...

    @property
    def headers(self) -> CIMultiDict[str]: ...
    @headers.setter
    def headers(self, value: Mapping[str, str]) -> None: ...

    @property
    def http_version(self) -> str: ...
    @http_version.setter
    def http_version(self, value: str) -> None: ...

    @property
    def extensions(self) -> dict[str, Any]: ...
    @extensions.setter
    def extensions(self, value: Mapping[str, Any]) -> None: ...

    async def next_chunk(self) -> Bytes | None: ...
    async def bytes(self) -> Bytes: ...
    async def json(self) -> Any: ...
    def content_length(self) -> int | None: ...
    def content_type_charset(self) -> str | None: ...
    def url(self) -> Url: ...
    def remote_addr_ip_port(self) -> tuple[str, int] | None: ...
    def error_for_status(self) -> None: ...


class ResponseBuilder:
    def __init__(self) -> None: ...
    async def build(self) -> Response: ...
    def status(self, value: int) -> Self: ...
    def version(self, value: str) -> Self: ...
    def header(self, key: str, value: str) -> Self: ...
    def copy_headers(self) -> CIMultiDict[str]: ...
    def set_headers(self, headers: CIMultiDict[str]) -> Self: ...
    def copy_body(self) -> Body | None: ...
    def set_body(self, value: Body | None) -> None: ...
    def copy_extensions(self) -> dict[str, Any] | None: ...
    def set_extensions(self, value: Mapping[str, Any] | None) -> None: ...
