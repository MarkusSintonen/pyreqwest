from typing import Protocol, Mapping
from typing_extensions import Self

from multidict import CIMultiDict

from pyreqwest.http import Url, UrlType
from pyreqwest.request import RequestBody
from pyreqwest.response import Response


class Middleware(Protocol):
    async def handle(self, request: MiddlewareRequest, next: Next) -> Response: ...


class Next:
    async def run(self, request: MiddlewareRequest) -> Response: ...
    async def create_response_override(
        self,
        *,
        status_code: int | None = None,
        headers: CIMultiDict[str] | None = None,
        version: str | None = None,
        body_bytes: bytes | None = None,
        extensions: Mapping[str, str] | None = None,
    ) -> Response: ...


class MiddlewareRequest:
    @property
    def method(self) -> str: ...
    @method.setter
    def method(self, value: str) -> None: ...
    @property
    def url(self) -> Url: ...
    @url.setter
    def url(self, value: UrlType) -> None: ...

    def copy_headers(self) -> CIMultiDict[str]: ...
    def set_headers(self, value: CIMultiDict[str]) -> None: ...
    def get_header(self, key: str) -> str | None: ...
    def set_header(self, key: str, value: str) -> str | None: ...
    def copy_body(self) -> RequestBody | None: ...
    def set_body(self, value: object) -> None: ...
    def copy_extensions(self) -> dict[str, str] | None: ...
    def set_extensions(self, value: Mapping[str, str] | None) -> None: ...

    def copy(self) -> Self: ...
    def __copy__(self) -> Self: ...
